# Generic option gives us Git, Ruby, NodeJS, JVM, i.e. everything we need.
# https://docs.travis-ci.com/user/languages/minimal-and-generic/#generic
language: generic

# Travis CI does not fetch the repository alltogether by default, and we need
# to count commits to evaluate application build number. See also:
# https://github.com/travis-ci/travis-ci/issues/7422.
# TODO(dotdoom): use CI build number instead of commit count.
git:
  depth: false

addons:
  apt:
    packages:
      # https://flutter.io/docs/get-started/install/linux.
      - lib32stdc++6
      - libglu1-mesa

env:
  global:
    - TERM=dumb
    - PAGER=cat
    - SDK_ROOT="$HOME/sdk"
    - ANDROID_HOME="$SDK_ROOT/android"
    - PATH="$SDK_ROOT/flutter/bin:$SDK_ROOT/google-cloud-sdk/bin:$PATH"
    - GRADLE_OPTS="-Dorg.gradle.daemon=false"
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1
    # A workaround to hide large dumps of text files, see also
    # https://github.com/flutter/flutter/pull/4989.
    - BOT=false

matrix:
  include:
    # Build Android / deploy to Play Store, deploy Firebase.
    - os: linux
      # URL from https://cloud.google.com/sdk/docs/downloads-versioned-archives.
      env: GCLOUD_URL='https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-227.0.0-linux-x86_64.tar.gz'
    # Build iOS / deploy to App Store.
    - os: osx
      env: GCLOUD_URL='https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-227.0.0-darwin-x86_64.tar.gz'

branches:
  only:
    - master

cache:
  directories:
    # pod setup (clones repository): 104s
    - $HOME/.cocoapods
    # flutter doctor (builds flutter tool): 124s
    - $SDK_ROOT/flutter
    - $ANDROID_HOME
    - $HOME/.pub-cache
    - $HOME/.gradle
    - $HOME/.npm
    - $TRAVIS_BUILD_DIR/vendor/bundle
    - $TRAVIS_BUILD_DIR/firebase/node_modules
    - $TRAVIS_BUILD_DIR/firebase/functions/node_modules
    - $TRAVIS_BUILD_DIR/firebase/www/bower_components

before_script:
  - mkdir -p "${SDK_ROOT?}"

  # Install and configure gcloud.
  - curl -sSL "${GCLOUD_URL?}" | tar -C "${SDK_ROOT?}" -xz
  # This is needed only on OSX to fetch match keys repository.
  - |
    git config --global credential.https://source.developers.google.com.helper \
        gcloud.sh
  - gcloud version

  # Install and build flutter (may be cached).
  - |
    if hash flutter; then
      flutter upgrade
    else
      git clone --depth=2 --branch=beta https://github.com/flutter/flutter.git \
          "${SDK_ROOT?}/flutter"
    fi
  - flutter precache
  - flutter --version

  # Install Android SDK.
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      mkdir -p "${ANDROID_HOME?}/licenses"
      # This is a hash of accepted licenses, which can be copied verbatim from
      # developer's workstation.
      echo d56f5187479451eabf01fb78af6dfcb131a6481e \
        > "${ANDROID_HOME?}/licenses/android-sdk-license"

      # Bootstrap step necessary to run Gradle, which installs Android SDK.
      echo "flutter.sdk=$SDK_ROOT/flutter" > flutter/android/local.properties
      ( cd flutter/android && ./gradlew resolveDependencies )
    fi

  - bundle --version
  - bundle install

  - ( cd flutter && flutter packages get )

  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      pod --version
      bundle exec pod setup &&
        ( cd flutter/ios && bundle exec pod install )
    else
      npm --version
      ( cd firebase && npm install --no-save ) &&
        ( cd firebase/functions && npm install --no-save ) &&
        ( cd firebase/www && ../node_modules/.bin/bower --allow-root install )
    fi

script:
  - ( cd flutter && bundle exec fastlane build )

  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      ( cd flutter && bundle exec fastlane android build )

      if [ -n "$(git status --porcelain)" ]; then
        echo 'Working directory not clean after reformat / update:' >&2
        git status >&2
        git diff >&2
        exit 1
      fi

      ( cd flutter && flutter test --coverage )
      bash <(curl -s https://codecov.io/bash)

      ( cd firebase && npm run build )
      ( cd firebase/www && ../node_modules/.bin/polymer lint )
    fi

  - |
    if [[ "$TRAVIS_PULL_REQUEST" == "false" ]]; then
      # We use this account to access both Google Play account and GCS.
      # The former requires it to be in "app" subdirectory.
      echo "${GCLOUD_SERVICE_KEY}" | base64 --decode > flutter/android/app/play-store-service-account.json
      gcloud auth activate-service-account --key-file flutter/android/app/play-store-service-account.json

      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        echo 'Building a tag or "master" branch. Deploy Firebase to debug,'
        echo 'publish to Play Store (internal track).'

        mkdir -p ~/.android
        gsutil cp gs://dasfoo-keystore/debug.keystore ~/.android/
        gsutil cp gs://dasfoo-keystore/delern.jks flutter/android/app/
        ( cd firebase && PROJECT=delern-debug npm run deploy )
        ( cd firebase && PROJECT=delern-e1b33 npm run deploy )
        ( cd flutter && bundle exec fastlane android publish )
      else
        if [ -n "$TRAVIS_TAG" ]; then
          echo 'Building a tag. Upload to TestFlight.'
          ( cd flutter && bundle exec fastlane ios publish )
        elif [[ "$TRAVIS_BRANCH" == "master" ]]; then
          echo 'Building "master" branch. Build debug version, sign. Do not'
          echo 'upload to TestFlight (review process is too slow, besides,'
          echo 'version number format will look like a.b.c-N-gCOMMIT, which is'
          echo 'not accepted by Apple Store).'

          ( cd flutter && bundle exec fastlane ios build )
        else
          echo 'Unexpected condition for triggering the build!' >&2
          exit 1
        fi
       fi
    else
      echo 'Building a PR. No access to keys. Build debug version w/o signing.'

      if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        sed -i '' 's/"CODE_SIGN_IDENTITY.*/CODE_SIGNING_REQUIRED = NO;/g' \
            flutter/ios/Runner.xcodeproj/project.pbxproj
        ( cd flutter && flutter build ios --debug )
      fi
    fi

before_cache:
  - rm -f .npm/anonymous-cli-metrics.json
