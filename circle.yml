# TODO(dotdoom): adjust cache to save SDK and Android image.
machine:
  java:
    version: oraclejdk8

checkout:
  post:
  - git submodule sync
  - git submodule update --init

dependencies:
    pre:
    - mkdir -p "${ANDROID_HOME?}/licenses"
    # Take this text from the Android SDK directory on your machine.
    - echo '8933bad161af4178b1185d1a37fbf41ea5269c55' >"${ANDROID_HOME?}/licenses/android-sdk-license"
    post:
    # For emulator. Cannot use x86 w/o HW acceleration, which is provided by KVM.
    # Keep in sync with the SDK version.
    # To list all supported images:
    # $ cd android-sdk-linux; tools/android list sdk --extended --all
    # (look for a string: sys-img-XX-android-YY)
    # Currently, there's no image for API level 25 with ARM EABI.
    - echo y | android update sdk --no-ui --all --filter sys-img-armeabi-v7a-android-24
    # For lint to be able to detect deprecated API.
    - echo y | android update sdk --no-ui --all --filter platform-tools

test:
  pre:
  - echo no | android create avd --force -n test -t android-24 --abi default/armeabi-v7a
  - emulator -avd test -no-audio -no-window:
      background: true
      parallel: true
  - circle-android wait-for-boot
  override:
  # Not "build connectedCheck" because these targets will involve Release, which is not available
  # due to lack of signing keystore at this stage.
  - GRADLE_OPTS=-Xmx256m ./gradlew lintDebug testDebugUnitTest connectedDebugAndroidTest --console=plain
  post:
  # TODO(dotdoom): cleanup, leave only useful files.
  - mv app/build/{outputs,reports} "${CIRCLE_ARTIFACTS?}"
  - mv app/build/test-results/* "${CIRCLE_TEST_REPORTS?}"

deployment:
  release:
    tag: /v[0-9]+(\.[0-9]+)*/
    owner: dasfoo
    commands:
    # TODO(dotdoom): Make sure the tag is signed. Do not deploy unsigned tags!
    #- git verify-tag $CIRCLE_TAG
    # Taken from https://circleci.com/docs/google-auth/.
    - sudo /opt/google-cloud-sdk/bin/gcloud --quiet components update
    - echo $GCLOUD_SERVICE_KEY | base64 --decode > app/play-store-service-account.json
    - gcloud auth activate-service-account --key-file app/play-store-service-account.json
    - gcloud config set project $GCLOUD_PROJECT
    # Get our keystore.
    - gsutil cp gs://dasfoo-keystore/delern.jks app
    - ./gradlew publishRelease --console=plain
