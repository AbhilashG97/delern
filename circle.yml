general:
  artifacts:
  - app/build/outputs
  - app/build/reports

machine:
  java:
    version: oraclejdk8

checkout:
  post:
  - git submodule sync
  - git submodule update --init

dependencies:
  cache_directories:
  - ~/.gradle
  pre:
  - mkdir -p "${ANDROID_HOME?}/licenses"
  # This is just a hash sum of the license agreements accepted.
  # Take this text from the Android SDK directory on your machine.
  - echo 8933bad161af4178b1185d1a37fbf41ea5269c55 >"${ANDROID_HOME?}/licenses/android-sdk-license"
  post:
  - sudo apt update; sudo apt install -y xsltproc
  # For emulator. Cannot use x86 w/o HW acceleration, which is only provided by KVM.
  # Keep in sync with the SDK version. To list all supported images:
  # $ cd android-sdk-linux; tools/android list sdk --extended --all
  # (look for a string: sys-img-XX-google_apis-YY)
  # Currently, there's no image for API level 25 with ARM EABI.
  - echo y | android update sdk --no-ui --all --filter android-19
  - echo y | android update sdk --no-ui --all --filter sys-img-armeabi-v7a-google_apis-19
  # For lint to be able to detect deprecated API.
  - echo y | android update sdk --no-ui --all --filter platform-tools
  # Local firebase server for instrumented tests.
  - npm install firebase-server
  - node node_modules/.bin/firebase-server -p 5533 -v:
      background: true

test:
  pre:
  - echo no | android create avd --force -n test -t android-19 --abi google_apis/armeabi-v7a
  # Raise memory for the emulator.
  - sed -i 's/^hw.ramSize=.*/hw.ramSize=1024/' ~/.android/avd/test.avd/config.ini
  - ./gradlew lintNormalDebug testNormalDebugUnitTest assembleInstrumentedLocalRelease assembleInstrumentedLocalReleaseAndroidTest --console=plain
  # Have to keep the directory for CircleCI to correctly identify the tests.
  - mkdir "${CIRCLE_TEST_REPORTS?}"/lint
  - xsltproc app/config/lint-junit.xslt app/build/outputs/lint-results-normalDebug.xml >"${CIRCLE_TEST_REPORTS?}"/lint/results.xml
  - emulator -avd test -no-window:
      background: true
  - circle-android wait-for-boot
  # Not ideal, but lets the emulator ramp up (especially slow because of google_apis).
  - sleep 120s
  override:
  - GRADLE_OPTS=-Xmx256m ./gradlew connectedInstrumentedLocalReleaseAndroidTest --console=plain --info --stacktrace
  post:
  - adb logcat -d >"${CIRCLE_ARTIFACTS?}"/logcat.txt
  # Kill running emulator to free up resources for e.g. Release build.
  - adb -s emulator-5554 emu kill
  - mv app/build/test-results "${CIRCLE_TEST_REPORTS?}"
  - mv app/build/outputs/androidTest-results "${CIRCLE_TEST_REPORTS?}"

deployment:
  release:
    tag: /v[0-9]+(\.[0-9]+)*/
    owner: dasfoo
    commands:
    # https://circleci.com/docs/google-auth/
    # `sudo -i` to prevent gcloud from creating logs directory in our $HOME with root:root owner.
    - sudo -i /opt/google-cloud-sdk/bin/gcloud --quiet components update
    - sudo -i /opt/google-cloud-sdk/bin/gcloud --quiet components install beta
    - echo "${GCLOUD_SERVICE_KEY}" | base64 --decode > app/play-store-service-account.json
    - gcloud auth activate-service-account --key-file app/play-store-service-account.json
    - gsutil cp gs://dasfoo-keystore/debug.keystore ~/.android
    # https://circleci.com/docs/firebase-test-lab/
    - ./gradlew assembleInstrumentedRemoteRelease assembleInstrumentedRemoteReleaseAndroidTest --console=plain
    - >
        gcloud --project=delern-debug beta test android run
        --app app/build/outputs/apk/app-instrumentedRemote-release.apk
        --test app/build/outputs/apk/app-instrumentedRemote-release-androidTest.apk
        --results-bucket delern-test-results
    # Also run Robo tests: https://firebase.google.com/docs/test-lab/robo-ux-test
    - gsutil cp gs://dasfoo-keystore/delern.jks app
    - ./gradlew lintNormalRelease assembleNormalRelease --console=plain
    - >
        gcloud --project=delern-e1b33 beta test android run
        --app app/build/outputs/apk/app-normal-release.apk
        --results-bucket delern-test-results
    # Publish to Google Play.
    - ./gradlew publishNormalRelease --console=plain
    # https://firebase.google.com/docs/crash/android#uploading_proguard_mapping_files_with_gradle
    - echo "${FIREBASE_SERVICE_KEY}" | base64 --decode > app/firebase-service-account.json
    # This task requires app/google-services.json and will not recognize any other (build type of flavor) path.
    - ./gradlew -PFirebaseServiceAccountFilePath=$PWD/app/firebase-service-account.json app:firebaseUploadNormalReleaseProguardMapping --console=plain
