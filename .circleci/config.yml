version: 2
jobs:
  build:
    working_directory: ~/delern
    docker:
    - image: openjdk:8
    environment:
    - ANDROID_HOME: /opt/android-sdk-linux
    - TERM: dumb
    - IDEA_VERSION: IC-2017.2.3-no-jdk
    steps:
    - checkout
    - run:
        name: "Prepare checked out Git repository"
        command: |
          # --invert-grep appeared only in Git 2.4
          if git log --format=%H "origin/master.." |
              grep -x -v -f <(git log --format=%H "origin/master.." -E --grep '^relnote: (.*[.]|none[.]?)$'); then
            echo "Found commits without (or with invalid) Release Notes, aborting"
            exit 1
          fi
          git submodule sync
          git submodule update --init
          # We count tags to compute a version number; make sure renamed tags
          # (aka removed and re-added) do not count twice.
          git tag -l | xargs git tag -d
          git fetch --tags
          find . -name package.json -o -name '*.gradle' -type f -print0 | xargs -0 cat >/tmp/dependencies
          echo "${IDEA_VERSION}" >>/tmp/dependencies

    - restore_cache:
        keys:
        - v4-android-{{ .Branch }}-{{ checksum "/tmp/dependencies" }}
        - v4-android-{{ .Branch }}-
        - v4-android-master-

    - run:
        name: "Install Android SDK"
        command: |
          mkdir -p "${ANDROID_HOME?}/licenses"
          # This is just a hash sum of the license agreements accepted.
          # Take this text from the Android SDK directory on your machine.
          echo 8933bad161af4178b1185d1a37fbf41ea5269c55 >"${ANDROID_HOME?}/licenses/android-sdk-license"
          # These two packages are normally already available, but we deal with some extremely minimalistic Docker image.
          apt update
          apt install -y lsb-release apt-transport-https build-essential
          if [ ! -d "/opt/idea/${IDEA_VERSION}" ]; then
            rm -rf /opt/idea
            mkdir /opt/idea
            curl -sSL "https://download.jetbrains.com/idea/idea${IDEA_VERSION?}.tar.gz" |
                tar -C /opt/idea -x -z
            mv /opt/idea/* "/opt/idea/${IDEA_VERSION}"
          fi

    - run:
        name: "Lint, assemble and run unit tests"
        command: |
          # Check formatting
          "/opt/idea/${IDEA_VERSION}/bin/format.sh" -m '*.java' -r */src >/dev/null
          git diff --stat --exit-code
          # Run lint over debug (rather than instrumented) to allow the tools to access non-optimized
          # class data.
          ./gradlew \
            --continue \
            :app:checkQualityDebug \
            :app:testDebugUnitTest \
            :core:checkQualityMain \
            :core:test \
            --quiet \
            --console=plain
          # Assemble instrumented to check ProGuard configuration and warnings.
          ./gradlew \
            --continue \
            :app:assembleInstrumented \
            :app:assembleInstrumentedAndroidTest \
            --quiet \
            --console=plain >/dev/null

    - run:
        name: "Re-run unit tests with INFO level"
        command: |
          ./gradlew \
            --info \
            :app:testDebugUnitTest \
            :core:test \
            --console=plain
        when: on_fail

    # Some packages are installed only during the lint/assemble step, we need to cache them as well.
    - save_cache:
        # Use different keys because caches are immutable.
        key: v4-android-{{ .Branch }}-{{ checksum "/tmp/dependencies" }}
        paths:
        - core/firebase/node_modules
        - ~/.gradle
        # TODO(dotdoom): use environment variables once they are supported
        #                Currently only CircleCI built-in variables are supported.
        - /opt/android-sdk-linux
        - /opt/idea

    - deploy:
        name: "Install Cloud SDK, run instrumented tests"
        # https://cloud.google.com/sdk/downloads#apt-get
        command: |
          if [ -n "${CIRCLE_TAG}" -o "${CIRCLE_BRANCH}" = "master" ]; then
            # Deploy debug database rules before running any tests.
            ./gradlew -PfirebaseProject=delern-debug core:deployFirebase

            echo "deb https://packages.cloud.google.com/apt cloud-sdk-$(lsb_release -c -s) main" \
              >>/etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
            apt update
            apt install -y google-cloud-sdk

            # We use this account to access both Google Play account and GCS.
            # The former requires it to be in "app" subdirectory.
            echo "${GCLOUD_SERVICE_KEY}" | base64 --decode > app/play-store-service-account.json
            gcloud auth activate-service-account --key-file app/play-store-service-account.json
            gsutil cp gs://dasfoo-keystore/debug.keystore ~/.android
            gsutil cp gs://dasfoo-keystore/delern.jks app

            # Run instrumented tests (for coverage).
            ./gradlew \
              -PcoverageRun \
              assembleInstrumented \
              assembleInstrumentedAndroidTest \
              --console=plain
            # https://circleci.com/docs/firebase-test-lab/
            # FIXME(https://firebase.google.com/support/): --device model=Nexus5
            gcloud --project=delern-debug firebase test android run \
              --timeout 30m \
              --app app/build/outputs/apk/instrumented/app-instrumented.apk \
              --test app/build/outputs/apk/androidTest/instrumented/app-instrumented-androidTest.apk \
              --environment-variables coverage=true,coverageFile=/sdcard/coverage/coverage.ec \
              --directories-to-pull /sdcard/coverage \
              --results-bucket delern-test-results \
              --results-dir "circle-${CIRCLE_BUILD_NUM}"
            gsutil cp "gs://delern-test-results/circle-${CIRCLE_BUILD_NUM}/*/artifacts/coverage.ec" \
              app/build/outputs/code-coverage/connected/coverage.ec
            ./gradlew -PcoverageRun -x app:connectedInstrumentedAndroidTest app:createInstrumentedAndroidTestCoverageReport
            # The code in "app" can only be covered by Android on-device tests,
            # therefore PR builds will always report false negatives.
            ./gradlew \
              core:jacocoTestReport \
              app:jacocoTestDebugUnitTestReport \
              --console=plain
            bash <(curl -s https://codecov.io/bash)

            # Run instrumented test (for ProGuard).
            ./gradlew \
              clean \
              assembleInstrumented \
              assembleInstrumentedAndroidTest \
              --console=plain
            # https://circleci.com/docs/firebase-test-lab/
            # FIXME(https://firebase.google.com/support/): --device model=Nexus5
            gcloud --project=delern-debug firebase test android run \
              --timeout 30m \
              --app app/build/outputs/apk/instrumented/app-instrumented.apk \
              --test app/build/outputs/apk/androidTest/instrumented/app-instrumented-androidTest.apk

            # Assemble Release APK (to store in artifacts).
            ./gradlew clean assembleRelease

            # If tests have passed, deploy production database.
            ./gradlew -PfirebaseProject=delern-e1b33 core:deployFirebase
          fi

    - deploy:
        name: "Build signed Release binary, run instrumented tests, publish to Google Play"
        command: |
          if [ -n "${CIRCLE_TAG}" ]; then
            # Run instrumented test (on hardware).
            ./gradlew \
              clean \
              assembleInstrumented \
              assembleInstrumentedAndroidTest \
              --console=plain
            gcloud --project=delern-debug firebase test android run \
              --app app/build/outputs/apk/instrumented/app-instrumented.apk \
              --test app/build/outputs/apk/androidTest/instrumented/app-instrumented-androidTest.apk
            # Build relnote.
            previous_tag="$(git tag --sort=version:refname | grep -F -v -x -- "${CIRCLE_TAG?}" | tail -1)"
            git log "${previous_tag?}.." --format=%B | \
              grep '^relnote: ' | \
              grep -E -v -x 'relnote: none[.]?' | \
              cut -b10- | \
              awk '!a[$0]++' | \
              cat <(echo "${CIRCLE_TAG}") - >app/src/main/play/en-US/whatsnew
            # Publish to Google Play (this also automatically runs Robo tests).
            ./gradlew lintRelease publishRelease --console=plain
          fi

    - store_test_results:
        path: app/build/test-results
    - store_test_results:
        path: core/build/test-results
    - store_artifacts:
        path: app/build/outputs
    - store_artifacts:
        path: app/build/reports
    - store_artifacts:
        path: app/src/main/play

workflows:
  version: 2
  build-workflow:
    jobs:
    - build:
        filters:
          tags:
            only: /v[0-9]+(\.[0-9]+)*/
