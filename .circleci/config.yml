version: 2
jobs:
  build:
    working_directory: ~/delern
    docker:
    - image: openjdk:8
    environment:
    - ANDROID_EMULATOR_VERSION: 19
    # https://d.android.com/studio/index.html#command-tools
    - ANDROID_SDK_TOOLS_URL: https://dl.google.com/android/repository/tools_r25.2.3-linux.zip
    - ANDROID_HOME: /opt/android-sdk-linux
    - TERM: dumb
    steps:
    - checkout
    - run:
        name: "Prepare checked out Git repository"
        command: |
          # --invert-grep appeared only in Git 2.4
          if git log --format=%H "origin/master.." |
              grep -x -v -f <(git log --format=%H "origin/master.." --grep '^relnote: '); then
            echo "Found commits without Release Notes, aborting"
            exit 1
          fi
          git submodule sync
          git submodule update --init
          # We count tags to compute a version number; make sure renamed tags
          # (aka removed and re-added) do not count twice.
          git tag -l | xargs git tag -d
          git fetch --tags

    - run:
        name: "Install system dependencies"
        working_directory: ~/delern/app/build
        command: |
          curl -sL https://deb.nodesource.com/setup_6.x | bash -
          apt install -y nodejs
          npm install --prefix=$PWD git+https://git@github.com/urish/firebase-server.git firebase-bolt

    - run:
        # TODO(dotdoom): run this in a separate Docker container / nodejs image
        #                once checkout step is available there.
        name: "Start a local Firebase server (for isolated tests)"
        background: true
        working_directory: ~/delern/app/build
        command: |
          mkdir -p outputs
          node_modules/.bin/firebase-bolt ../../firebase/rules.bolt -o outputs/firebase-rules.json
          node_modules/.bin/firebase-server -r outputs/firebase-rules.json -p 5533 -v -n localhost

    - restore_cache:
        keys:
        - v3-android-{{ .Branch }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
        - v3-android-{{ .Branch }}-{{ checksum "build.gradle" }}-
        - v3-android-{{ .Branch }}-
        - v3-android-master-

    - run:
        name: "Install Android SDK"
        command: |
          mkdir -p "${ANDROID_HOME?}/licenses"
          # This is just a hash sum of the license agreements accepted.
          # Take this text from the Android SDK directory on your machine.
          echo 8933bad161af4178b1185d1a37fbf41ea5269c55 >"${ANDROID_HOME?}/licenses/android-sdk-license"
          ./gradlew dependencies --status
#    - run:
        #name: "Install / update Android Emulator"
        ## TODO(dotdoom): use environment variables once they are supported
        #working_directory: /opt/android-sdk-linux
        #command: |
          #if [ ! -d tools ]; then
            #ls -lah
            #wget -O tools.zip "${ANDROID_SDK_TOOLS_URL?}"
            #unzip -q tools.zip
          #fi
          #tools/bin/sdkmanager --update
          ## Cannot use x86 w/o HW acceleration, which is only provided by KVM. List of images:
          ## $ANDROID_HOME/tools/bin/sdkmanager --list --verbose | egrep -x 'system-images;.*;armeabi-v7a'
          ## platform-tools is required for lint to be able to detect deprecated API.
          #tools/bin/sdkmanager \
            #"platforms;android-${ANDROID_EMULATOR_VERSION?}" \
            #"system-images;android-${ANDROID_EMULATOR_VERSION?};google_apis;armeabi-v7a" \
            #emulator platform-tools

    - run:
        name: "Lint and assemble"
        command: |
          # http://www.littlerobots.nl/blog/disable-android-pre-dexing-on-ci-builds/
          # Run lint over debug (rather than instrumented) to allow the tools to access non-optimized
          # class data.
          ./gradlew -PdisablePreDex \
            -PisolatedRun \
            --continue \
            lintDebug \
            testDebugUnitTest \
            assembleInstrumented \
            assembleInstrumentedAndroidTest \
            --console=plain

    # Some packages are installed only during the lint/assemble step, we need to cache them as well.
    - save_cache:
        # Use different keys because caches are immutable.
        key: v3-android-{{ .Branch }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
        paths:
        - ~/.gradle
        # TODO(dotdoom): use environment variables once they are supported
        - /opt/android-sdk-linux

    - deploy:
        name: "Install Cloud SDK"
        # https://cloud.google.com/sdk/downloads#apt-get
        command: |
          echo "deb https://packages.cloud.google.com/apt cloud-sdk-$(lsb_release -c -s) main" \
            >>/etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
          apt update
          apt install -y google-cloud-sdk

    - deploy:
        name: "Build signed Release binary, run instrumented tests, publish to Google Play"
        command: |
         if [ -n "${CIRCLE_TAG}" ]; then
            previous_tag="$(git tag --sort=version:refname | grep -F -v -x -- "${CIRCLE_TAG?}" | tail -1)"
            git log "${previous_tag?}.." --format=%B | \
              grep '^relnote: ' | \
              grep -v -x 'relnote: none' | \
              cut -b10- | \
              cat <(echo "${CIRCLE_TAG}") - >app/src/main/play/en-US/whatsnew
            # We use this account to access both Google Play account and GCS.
            # The former requires it to be in "app" subdirectory.
            echo "${GCLOUD_SERVICE_KEY}" | base64 --decode > app/play-store-service-account.json
            gcloud auth activate-service-account --key-file app/play-store-service-account.json
            gsutil cp gs://dasfoo-keystore/debug.keystore ~/.android
            gsutil cp gs://dasfoo-keystore/fabric.properties app
            # https://circleci.com/docs/firebase-test-lab/
            ./gradlew -PdisablePreDex \
              assembleInstrumented \
              assembleInstrumentedAndroidTest \
              --console=plain
            # Run instrumented tests
            gcloud --project=delern-debug firebase test android run \
              --app app/build/outputs/apk/app-instrumented.apk \
              --test app/build/outputs/apk/app-instrumented-androidTest.apk \
              --results-bucket delern-test-results
            gsutil cp gs://dasfoo-keystore/delern.jks app
            # Publish to Google Play (this also automatically runs Robo tests).
            ./gradlew lintRelease publishRelease --console=plain
          fi

    - store_test_results:
        path: app/build/test-results
    - store_artifacts:
        path: app/build/outputs
    - store_artifacts:
        path: app/build/reports
    - store_artifacts:
        path: app/src/main/play

# A hack per https://discuss.circleci.com/t/git-tag-deploys-in-2-0/9493/8
deployment:
  fake_deploy_for_cci2:
    tag: /v[0-9]+(\.[0-9]+)*/
    commands:
    - echo this is only a trigger
