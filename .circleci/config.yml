version: 2

jobs:
  build:
    docker:
    - image: dasfoo/firebase:latest
    environment:
    - ANDROID_HOME: /root/android-sdk
    - TERM: dumb
    - PAGER: cat
    # https://docs.gradle.org/current/userguide/gradle_daemon.html#when_should_i_not_use_the_gradle_daemon
    # "It is recommend to disable the Daemon for Continuous Integration and build server environments."
    - GRADLE_OPTS: -Dorg.gradle.daemon=false
    steps:
    - checkout
    - run:
        name: "Prepare checked out Git repository"
        command: |
          # --invert-grep appeared only in Git 2.4
          if git log --format=%H "origin/master.." |
              grep -x -v -f <(git log --format=%H "origin/master.." -E --grep '^relnote: (.*[.]|none[.]?)$'); then
            echo "Found commits without (or with invalid) Release Notes, aborting"
            exit 1
          fi
          git submodule sync
          git submodule update --init
          # We count tags to compute a version number; make sure renamed tags
          # (aka removed and re-added) do not count twice.
          git tag -l | xargs git tag -d
          git fetch --tags

    - restore_cache:
        keys:
        - v14-{{ arch }}-{{ .Branch }}-{{ checksum "pubspec.yaml" }}
        - v14-{{ arch }}-{{ .Branch }}-
        - v14-{{ arch }}-master-

    - run:
        name: "Install dependencies"
        command: |
          ( cd firebase && npm install --no-save )
          ( cd firebase/functions && npm install --no-save )
          ( cd firebase/www && ../node_modules/.bin/bower --allow-root install )

          bundle install

          mkdir -p "${ANDROID_HOME?}/licenses"
          # This is just a hash sum of the license agreements accepted.
          # Take this text from the Android SDK directory on your machine.
          echo 8933bad161af4178b1185d1a37fbf41ea5269c55 >>"${ANDROID_HOME?}/licenses/android-sdk-license"
          echo d56f5187479451eabf01fb78af6dfcb131a6481e >>"${ANDROID_HOME?}/licenses/android-sdk-license"
          # TODO(dotdoom): flutter upgrade ? (docker needs to be on a specific branch?)
          flutter packages get
          echo flutter.sdk=/opt/flutter > android/local.properties
          ( cd android && ./gradlew resolveDependencies )

    - save_cache:
        # Use different keys because caches are immutable.
        key: v14-{{ arch }}-{{ .Branch }}-{{ checksum "pubspec.yaml" }}
        paths:
        - ~/android-sdk
        - ~/.gradle
        - ~/.npm
        - ~/.pub-cache
        - ~/project/firebase/node_modules
        - ~/project/firebase/functions/node_modules
        - ~/project/firebase/www/bower_components
        - ~/project/vendor/bundle

    - run:
        name: "Lint, assemble and run unit tests"
        no_output_timeout: "35m"
        command: |
          ( cd android && ci-lint )
          ( cd firebase && ci-lint )

          bundle exec fastlane update_plugins
          bundle exec fastlane build
          bundle exec fastlane android build

          if [ -n "$(git status --porcelain)" ]; then
                echo 'Working directory not clean after reformat / update:' >&2
                git status >&2
                git diff >&2
                exit 1
          fi

          flutter test --coverage
          bash <(curl -s https://codecov.io/bash)

          ( cd firebase && npm run build )
          ( cd firebase/www && ../node_modules/.bin/polymer lint )

    - run:
        name: "[if branch=master] Deploy Firebase and build Release APK"
        command: |
          if [ "$CIRCLE_BRANCH" = "master" ]; then
            # We use this account to access both Google Play account and GCS.
            # The former requires it to be in "app" subdirectory.
            echo "${GCLOUD_SERVICE_KEY}" | base64 --decode > android/app/play-store-service-account.json
            gcloud auth activate-service-account --key-file android/app/play-store-service-account.json
            mkdir -p ~/.android
            gsutil cp gs://dasfoo-keystore/debug.keystore ~/.android/
            gsutil cp gs://dasfoo-keystore/delern.jks android/app/
            ( cd firebase && PROJECT=delern-debug npm run deploy )
            ( cd firebase && PROJECT=delern-e1b33 npm run deploy )
            bundle exec fastlane android publish
          fi

    - store_test_results:
        path: fastlane
    - store_artifacts:
        path: build/app/outputs
